#############################################################
# 
# Common MRC Test Bed config file. This file contains all the config values 
# required to run the MRC suite. At the first glance, there seems to be too many
# config values. There are 2 main reasons for the framework to design consider this :
# 1). The framework needs to intelligent enough to discover exisiting test setups.
# This prevents having to enter any config files at all, albiet, few human help required
# configs. 
# 2). For a framework to be intelligent, there are many decisions to take and config
# files, values help in keeping logic simple.
# 
# --existingsetup as default, will automatically discover the test setup and then fill these values.
# Asking for too many values, becomes prohibitory for new users and framework, go out of favouritism.
# Imagine saving 15-20 minutes of all testers before running test suites with any framework. 
#
############################################################

# IP details and username, password of hosts to use for testing.
# hosts is confusing for vmnames, with esxi hosts.
[hosts]
test_slaves = ip1, ip2, ip3
# These are test vms and not production deployment, keep same username/passwords.
username = root
password = pass1

# Details of existing esxi test setup to use.
[esxi]
version = 6.5

# Details of test VMs to use.
# When using --createnew : Use below labels/names and create a setup matching below configuration.
# When Not using --createnew : Below values will overwritten depending on the current test setup
# configuration.  
[vm]
appliance_ip = 10.10.11.178
cluster_id = 10101449_conf
cluster_name = conf
vcenter_ip = 10.10.14.49
vm_uuid = 1010885_6000C29780a2bc024b8d14ff84f055c3_MRC18-01
planning_base_url = https://%(appliance_ip)s:443/planning/
#name = cptest-vm
#number = 5
#appliance_ip = "192.168.3.76"
#app_username = "administrator@pio.com"
#app_password = "admin@123"
#vcenter_ip = "192.168.1.40"
#vcenter_username = "administrator@vsphere.local"
#vcenter_password = "Naruto@123"
#vcenter_cluster = "Cluster"
## nAME OF vm For testing policy attach / detach tests
#vm_name = "uBUntu_Test_VM_4"
#vm_name_1 = "ubuntu_Test_VM_1"
#attach_policy = "WriteBack"
#cache_replica = 0
#cluster_names = ["Cluster", "Cluster_1_1_1"]
#vmdkuuid = '6000C29e-35a7-c283-bf2e-11eba347bc8f'
#dsuuid = '2F30268b-8b3fced0/test_vm'
#host_ip_format = "192.168.4.12%s"

[vmdk]
size = 500gb
disktype =

[cpu]
ncpu = 

[apa]
policy = l1r2
mode = writeback
oanalyzer_default_profile_name = "pio_analyzer_writeback_profile"
pioanalyzer_default_profile_desc = "Used by PIO-Analyzer for migration"
default_optimize_policy = "WriteBack"
default_optimiZE_policy_desc = "PIO-Analyzer auto policy generated when optimizing VMDK."
default_optimize_replica_cnt = "1"
praapa_policy = "policy"
praapa_apa = "apa"
praapa_replica = "replica"
praapa_size = "size"
praapa_app_ip = "applianceIp"
data_format = {'Data': '', 'name': ''}

[testdriver]
tcworkers = host1, host2, host3
worksets = TC1-TC10
burstmode = false

# Below, is the list of all tools to install on test vms, required for running MRC Test cases.
# Consider your test vms as clean and with no tools already present.
# The framework will try to install al the tools or fail with specific reasons.
[install]
test_tools = fio, sysbench
python_tools = fabric, pp
system_tools = python, pip

# This is specific to testframework and not product git locations.
# TBD : We can integrate the jenkins file used for building APA.
[gitscm]
git_username = 
git_password = 
git_url =
# Branches can be master, pull request etc.
git_branch = master
